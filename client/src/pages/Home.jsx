import React, { useState, useEffect } from 'react';

import { Loader, Card, FormField } from '../components';
import { API_BASE_URL } from '../constants';

const RenderCards = ({ data, title }) => {
  if(data?.length > 0) { 
    return data.map((post) => <Card key={post._id} {...post} />)
  }

  return (
    <div className="col-span-full flex flex-col items-center justify-center py-20">
      <div className="w-24 h-24 rounded-full bg-gradient-to-br from-purple-100 to-blue-100 flex items-center justify-center mb-4">
        <svg className="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
        </svg>
      </div>
      <h2 className="font-semibold text-gray-500 text-xl mb-2">{title}</h2>
      <p className="text-gray-400 text-sm">Try searching with different keywords</p>
    </div>
  )
}

const Home = () => {
  const [Loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);
  const [searchText, setSearchText] = useState('');
  const [searchedResults, setSearchedResults] = useState(null);
  const [searchTimeout, setSearchTimeout] = useState(null);
  useEffect(() => {
    const fetchPosts = async () => {
      setLoading(true);

      try {
        const response = await fetch(`${API_BASE_URL}/api/v1/post`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        })

        if(response.ok) {
          const result = await response.json();

          setAllPosts(result.data.reverse());
        }
      } catch (error) {
        alert(error)
      } finally {
        setLoading(false)
      }
    }

    fetchPosts();
  }, []);

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResults = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLowerCase().includes(searchText.toLowerCase()));
  
        setSearchedResults(searchResults);
      }, 500)
    );
  }

  return (
    <section className="max-w-7xl mx-auto">
      <div className="mb-12">
        <h1 className="font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-[#222328] to-[#6469ff] text-4xl sm:text-5xl mb-3">
          The Community Showcase
        </h1>
        <p className="text-gray-600 text-lg max-w-2xl">
          Browse through a collection of imaginative and visually stunning images generated by AI
        </p>
      </div>

      <div className="mt-8 mb-10">
        <FormField 
          LabelName="Search Posts"
          type="text"
          name="text"
          placeholder="Search by username or prompt..."
          value={searchText}
          handleChange={handleSearchChange}
        />
      </div>

      <div className="mt-10">
        {Loading ? (
          <div className="flex justify-center items-center min-h-[400px]">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <div className="mb-6 p-4 bg-white rounded-xl shadow-sm border border-gray-100">
                <h2 className="font-semibold text-gray-700 text-lg">
                  Showing results for <span className="text-[#6469ff] font-bold">"{searchText}"</span>
                </h2>
              </div>
            )}
            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-4">
              {searchText ? (
                <RenderCards
                  data={searchedResults}
                  title="No search results found"
                />
              ) : (
                <RenderCards 
                  data={allPosts}
                  title="No posts found"
                /> 
              )}
            </div>
          </>
        )}
      </div>

    </section>
  )
}

export default Home
